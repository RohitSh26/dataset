using System.Collections.Generic;
using System.IO;
using System.Linq;

public static class DirectoryHelper
{
    /// <summary>
    /// Searches for files in the specified subdirectories of the source directory based on the provided search patterns
    /// and copies them to the destination directory while preserving the directory structure.
    /// </summary>
    /// <param name="sourceDirectory">The source directory containing the subdirectories.</param>
    /// <param name="destinationDirectory">The destination directory to copy files to.</param>
    /// <param name="subdirectories">A list of subdirectory names to search within.</param>
    /// <param name="searchPatterns">A list of search patterns to match against file names.</param>
    /// <returns>A list of missing files based on the provided search patterns.</returns>
    public static List<string> SearchAndCopyFiles(string sourceDirectory, string destinationDirectory, List<string> subdirectories, List<string> searchPatterns)
    {
        // Validate the source directory
        if (!Directory.Exists(sourceDirectory))
        {
            throw new DirectoryNotFoundException($"Source directory does not exist or could not be found: {sourceDirectory}");
        }

        List<string> missingFiles = new List<string>();

        foreach (string pattern in searchPatterns)
        {
            // If the pattern is for the root, handle it separately
            if (pattern == "*.*")
            {
                var anticipatedRootFiles = Directory.GetFiles(sourceDirectory, pattern).ToList();
                foreach (var file in anticipatedRootFiles)
                {
                    var destFile = Path.Combine(destinationDirectory, Path.GetFileName(file));
                    if (File.Exists(file))
                    {
                        File.Copy(file, destFile, true);
                    }
                    else
                    {
                        missingFiles.Add(file);
                    }
                }
            }

            // Process files for each specified subdirectory
            foreach (string subDir in subdirectories)
            {
                string fullSourceSubDir = Path.Combine(sourceDirectory, subDir);
                if (Directory.Exists(fullSourceSubDir))
                {
                    List<string> anticipatedFiles = Directory.GetFiles(fullSourceSubDir, pattern, SearchOption.AllDirectories).ToList();

                    foreach (string file in anticipatedFiles)
                    {
                        string relativePath = file.Substring(sourceDirectory.Length + 1);
                        string destFile = Path.Combine(destinationDirectory, relativePath);

                        // Ensure the destination directory exists
                        string destDir = Path.GetDirectoryName(destFile);
                        if (!Directory.Exists(destDir))
                        {
                            Directory.CreateDirectory(destDir);
                        }

                        // Check if the file exists and copy it
                        if (File.Exists(file))
                        {
                            File.Copy(file, destFile, true);
                        }
                        else
                        {
                            missingFiles.Add(file);
                        }
                    }
                }
            }
        }

        return missingFiles;
    }
}